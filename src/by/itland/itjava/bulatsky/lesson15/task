1. Создать класс MyListFirst<T>, реализовать в нем функционал  изменяющегося массива.
начальный размер 0.
    - метод add(T element) - добавление элемента
    - метод get(int index) - полчение элемента по его индексу
    - remove(int index) - удаление элемента по индексу
    - toString() - представление в строковом виде [0, 1, 2, 3]

2. Создать класс MyListSecond<T>, реализовать в нем функционал изменяющегося массива,
начальный размер 10, или задать в конструкторе
      - метод add(T element) - добавление элемента
      - метод get(int index) - полчение элемента по его индексу
      - remove(int index) - удаление элемента по индексу
      - getCapacity() - размер внутреннего массива
      - size() - количество элементов внутреннего массива
      - toArray() - представить все элементы в массив
      - метод add(int index, T element) - добавление элемента на указанную позицию
      - set(int index, T element) - замена элемента на указанной позицию
      - метод addAll(MyList<?> collection) - добавление в кнец всей коллекции
      - метод get(T element) - вернет индекс первого подходящего элемента, если нет, то вернет -1
      - toString() - представление в строковом виде [0, 1, 2, 3]

3. Создать класс MySet<T>, реализовать в нем функционал неповторяющейся последовательности элементов
    - метод add(T element) - добавление элемента
    - метод remove(T element) - удаление элемента
    - метод contains(T element) - проверка на содержимость элемента
    - метод size() - количество элементов
    - метод isEmpty() - проверка на пустоту
    - метод addAll(MySet<?> collection) - добавить всю коллекцию
    - toArray() - представить все элементы в массив
    - toString() - представление в строковом виде [0, 1, 2, 3]

4. Создать класс MyMap<T,R>, реализовать в нем функционал ассоциативного массива. это такие массивы,
у которых элементы выгледят следующим образом [ключ:значени, ключ:значение],
при этом элементы с одинаковыми ключами недопустимы. реализовать через два мессива
    - метод put(T key, R value) - добавить элемент с ключом key, значением value
    - метод getValue(T key) - вернет значение элемента с подходящим ключом
    - метод getKey(R value) - вернет ключ первого подхлдящего значения
    - метод toString() - строковое представление в виде {[ключ:значени], [ключ:значение]}

ПРИМЕЧАНИЕ!!! использовать стандартные коллекции НЕЛЬЗЯ.
